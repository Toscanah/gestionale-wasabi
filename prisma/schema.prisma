generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum OrderType {
    TABLE
    TO_HOME
    PICK_UP
}

enum PaymentType {
    CASH
    CARD
    VOUCHERS
    OTHER
}

model Address {
    id          Int         @id @default(autoincrement())
    customer_id Int
    street      String
    civic       String
    floor       String?
    stair       String?
    street_info String?
    customer    Customer    @relation(fields: [customer_id], references: [id])
    temporary   Boolean
    HomeOrder   HomeOrder[]
    doorbell    String?
}

model Order {
    id           Int              @id @default(autoincrement())
    created_at   DateTime         @default(now())
    type         OrderType
    total        Float?
    products     ProductInOrder[]
    paid         Boolean          @default(false)
    payments     Payment[]
    table_order  TableOrder?
    home_order   HomeOrder?
    pickup_order PickupOrder?
}

model TableOrder {
    id       Int     @id @default(autoincrement())
    order_id Int     @unique
    table_id Int?
    res_name String?
    people   Int
    order    Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
    table    Table?  @relation(fields: [table_id], references: [id])
}

model HomeOrder {
    id            Int      @id @default(autoincrement())
    order_id      Int      @unique
    address_id    Int
    customer_id   Int
    when          String?  @default("immediate")
    notes         String?
    customer      Customer @relation(fields: [customer_id], references: [id])
    contact_phone String?
    order         Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
    address       Address  @relation(fields: [address_id], references: [id])
}

model PickupOrder {
    id          Int       @id @default(autoincrement())
    order_id    Int       @unique
    customer_id Int?
    when        String?   @default("immediate")
    name        String
    customer    Customer? @relation(fields: [customer_id], references: [id])
    order       Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Customer {
    id            Int           @id @default(autoincrement())
    name          String?
    surname       String?
    email         String?
    preferences   String?
    addresses     Address[]
    home_orders   HomeOrder[]
    pickup_orders PickupOrder[]
    phone_id      Int?
    phone         Phone?        @relation(fields: [phone_id], references: [id])
    active        Boolean       @default(true)
}

model Phone {
    id       Int        @id @default(autoincrement())
    phone    String
    Customer Customer[]
}

model Table {
    id     Int          @id @default(autoincrement())
    number String
    orders TableOrder[]
}

model Payment {
    id        Int         @id @default(autoincrement())
    amount    Float?
    type      PaymentType
    order_id  Int
    order     Order       @relation(fields: [order_id], references: [id])
    create_at DateTime    @default(now())
}

model Admin {
    id       Int    @id @default(autoincrement())
    username String
    password String
}

model Rice {
    id        Int   @id @default(autoincrement())
    amount    Float
    threshold Float
}

model Product {
    id          Int              @id @default(autoincrement())
    category_id Int
    code        String
    desc        String
    site_price  Float
    home_price  Float
    rice        Float?
    orders      ProductInOrder[]
    category    Category         @relation(fields: [category_id], references: [id])
    active      Boolean          @default(true)
}

model ProductInOrder {
    id         Int                    @id @default(autoincrement())
    product    Product                @relation(fields: [product_id], references: [id])
    product_id Int
    order      Order                  @relation(fields: [order_id], references: [id])
    order_id   Int
    quantity   Int
    total      Float
    options    OptionInProductOrder[]
}

model Category {
    id       Int                @id @default(autoincrement())
    category String
    products Product[]
    options  CategoryOnOption[]
    active   Boolean            @default(true)
}

model CategoryOnOption {
    id          Int      @id @default(autoincrement())
    category_id Int
    option_id   Int
    category    Category @relation(fields: [category_id], references: [id])
    option      Option   @relation(fields: [option_id], references: [id])
}

model Option {
    id          Int                    @id @default(autoincrement())
    option_name String
    categories  CategoryOnOption[]
    products    OptionInProductOrder[]
    active      Boolean                @default(true)
}

model OptionInProductOrder {
    id                  Int            @id @default(autoincrement())
    product_in_order_id Int
    option_id           Int
    productInOrder      ProductInOrder @relation(fields: [product_in_order_id], references: [id])
    option              Option         @relation(fields: [option_id], references: [id])
}
