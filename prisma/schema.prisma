generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["typedSql"]
}

generator json {
    provider = "prisma-json-types-generator"
}

generator zod {
    provider = "prisma-zod-generator"
    config   = "./zod-gen-config.json"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Rider {
    id       Int     @id @default(autoincrement())
    name     String
    surname  String
    nickname String?
    active   Boolean @default(true)
}

model Order {
    id                          Int                @id @default(autoincrement())
    created_at                  DateTime           @default(now()) @db.Timestamptz(3)
    updated_at                  DateTime           @default(now()) @updatedAt @db.Timestamptz(3)
    discount                    Float              @default(0)
    type                        OrderType
    is_receipt_printed          Boolean            @default(false)
    suborder_of                 Int?
    rices                       Int?
    salads                      Int?
    soups                       Int?
    shift                       WorkingShift       @default(UNSPECIFIED)
    status                      OrderStatus        @default(ACTIVE)
    engagements                 Engagement[]
    issued_engagement_ledgers   EngagementLedger[] @relation("ledger_issued_on_order")
    redeemed_engagement_ledgers EngagementLedger[] @relation("ledger_redeemed_on_order")
    voided_engagement_ledgers   EngagementLedger[] @relation("ledger_voided_on_order")
    home_order                  HomeOrder?
    payments                    Payment[]
    pickup_order                PickupOrder?
    products                    ProductInOrder[]
    table_order                 TableOrder?
    // coupon_usages               CouponUsage[]

    @@index([created_at])
    @@index([status, created_at])
    @@index([type, created_at])
    @@index([shift, created_at])
    @@index([suborder_of])
    @@index([is_receipt_printed])
}

model TableOrder {
    table    String
    res_name String?
    people   Int
    id       Int     @id
    order    Order   @relation(fields: [id], references: [id], onDelete: Cascade)

    @@index([table])
    @@index([res_name])
}

model HomeOrder {
    address_id      Int
    customer_id     Int
    when            String           @default("immediate")
    contact_phone   String?
    last_reply_at   DateTime?        @db.Timestamptz(3)
    reply_seen_at   DateTime?        @db.Timestamptz(3)
    planned_payment PlannedPayment   @default(UNKNOWN)
    id              Int              @id
    prepaid         Boolean          @default(false)
    address         Address          @relation(fields: [address_id], references: [id])
    customer        Customer         @relation(fields: [customer_id], references: [id])
    order           Order            @relation(fields: [id], references: [id], onDelete: Cascade)
    messages        MetaMessageLog[]

    @@index([customer_id])
    @@index([address_id])
    @@index([last_reply_at])
    @@index([reply_seen_at])
    @@index([planned_payment])
    @@index([prepaid])
}

model PickupOrder {
    customer_id     Int?
    when            String         @default("immediate")
    name            String
    id              Int            @id
    prepaid         Boolean        @default(false)
    planned_payment PlannedPayment @default(UNKNOWN)
    customer        Customer?      @relation(fields: [customer_id], references: [id])
    order           Order          @relation(fields: [id], references: [id], onDelete: Cascade)

    @@index([customer_id])
    @@index([planned_payment])
    @@index([prepaid])
}

model Address {
    id          Int         @id @default(autoincrement())
    customer_id Int
    street      String
    civic       String
    doorbell    String
    floor       String?
    stair       String?
    street_info String?
    active      Boolean     @default(true)
    temporary   Boolean     @default(false)
    customer    Customer    @relation(fields: [customer_id], references: [id])
    home_orders HomeOrder[]

    @@index([customer_id])
    @@index([active, temporary])
}

model EngagementTemplate {
    id          Int            @id @default(autoincrement())
    label       String?
    type        EngagementType
    payload     Json
    created_at  DateTime       @default(now()) @db.Timestamptz(3)
    redeemable  Boolean        @default(false)
    engagements Engagement[]

    @@index([type])
    @@index([redeemable])
}

model Engagement {
    id          Int                @id @default(autoincrement())
    created_at  DateTime           @default(now()) @db.Timestamptz(3)
    customer_id Int?
    order_id    Int?
    template_id Int
    enabled     Boolean            @default(true)
    customer    Customer?          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    order       Order?             @relation(fields: [order_id], references: [id])
    template    EngagementTemplate @relation(fields: [template_id], references: [id])
    ledgers     EngagementLedger[]

    @@index([customer_id])
    @@index([order_id])
    @@index([template_id])
    @@index([enabled])
    @@index([order_id, enabled])
    @@index([customer_id, enabled])
}

model EngagementLedger {
    id                   Int                    @id @default(autoincrement())
    engagement_id        Int
    issued_on_order_id   Int
    issued_at            DateTime               @default(now()) @db.Timestamptz(3)
    redeemed_on_order_id Int?
    redeemed_at          DateTime?              @db.Timestamptz(3)
    voided_on_order_id   Int?
    voided_at            DateTime?              @db.Timestamptz(3)
    status               EngagementLedgerStatus @default(ISSUED)
    engagement           Engagement             @relation(fields: [engagement_id], references: [id], onDelete: Cascade)
    issued_on_order      Order                  @relation("ledger_issued_on_order", fields: [issued_on_order_id], references: [id])
    redeemed_on_order    Order?                 @relation("ledger_redeemed_on_order", fields: [redeemed_on_order_id], references: [id])
    voided_on_order      Order?                 @relation("ledger_voided_on_order", fields: [voided_on_order_id], references: [id])

    @@index([engagement_id])
    @@index([issued_on_order_id])
    @@index([redeemed_on_order_id])
}

model Customer {
    id            Int            @id @default(autoincrement())
    name          String?
    surname       String?
    email         String?
    preferences   String?
    active        Boolean        @default(true)
    phone_id      Int            @unique
    order_notes   String?
    origin        CustomerOrigin @default(UNKNOWN)
    addresses     Address[]
    phone         Phone          @relation(fields: [phone_id], references: [id], onDelete: Cascade)
    engagements   Engagement[]
    home_orders   HomeOrder[]
    pickup_orders PickupOrder[]
    stats         CustomerStats?

    @@index([active])
    @@index([origin])
    @@index([email])
}

model CustomerStats {
    customer_id    Int       @id
    total_orders   Int       @default(0)
    total_spent    Float     @default(0)
    average_order  Float     @default(0)
    /// [RFMCustomerSegment]
    rfm            Json      @default("{}")
    last_order_at  DateTime? @db.Timestamptz(3)
    first_order_at DateTime? @db.Timestamptz(3)
    customer       Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)

    @@index([total_orders])
    @@index([total_spent])
    @@index([average_order])
    @@index([last_order_at])
}

model Phone {
    id       Int       @id @default(autoincrement())
    phone    String    @unique
    customer Customer?
}

model Payment {
    id                 Int          @id @default(autoincrement())
    amount             Float        @default(0)
    order_id           Int
    created_at         DateTime     @default(now()) @db.Timestamptz(3)
    type               PaymentType
    scope              PaymentScope @default(UNKNOWN)
    payment_group_code String?
    order              Order        @relation(fields: [order_id], references: [id], onDelete: Cascade)

    @@index([order_id])
    @@index([created_at])
    @@index([payment_group_code])
    @@index([type])
    @@index([scope])
    @@index([order_id, created_at])
}

model RiceLog {
    id            Int         @id @default(autoincrement())
    created_at    DateTime    @default(now()) @db.Timestamptz(3)
    rice_batch_id Int?
    manual_value  Float?
    type          RiceLogType
    rice_batch    RiceBatch?  @relation(fields: [rice_batch_id], references: [id])

    @@index([rice_batch_id])
    @@index([created_at])
    @@index([type])
}

model RiceBatch {
    id       Int       @id @default(autoincrement())
    amount   Float     @default(0)
    label    String?
    rice_log RiceLog[]

    @@index([label])
}

model Product {
    id          Int              @id @default(autoincrement())
    category_id Int?
    code        String           @unique
    desc        String
    site_price  Float            @default(0)
    home_price  Float            @default(0)
    rice        Float            @default(0)
    active      Boolean          @default(true)
    kitchen     KitchenType      @default(NONE)
    rices       Int              @default(0)
    salads      Int              @default(0)
    soups       Int              @default(0)
    category    Category?        @relation(fields: [category_id], references: [id])
    orders      ProductInOrder[]

    @@index([category_id])
    @@index([active])
    @@index([kitchen])
    @@index([code])
    @@index([desc])
}

model ProductInOrder {
    id                    Int                    @id @default(autoincrement())
    product_id            Int
    order_id              Int
    quantity              Int                    @default(0)
    paid_quantity         Int                    @default(0)
    created_at            DateTime               @default(now()) @db.Timestamptz(3)
    frozen_price          Float                  @default(0)
    status                ProductInOrderStatus   @default(IN_ORDER)
    variation             String?
    last_printed_quantity Int                    @default(0)
    options               OptionInProductOrder[]
    order                 Order                  @relation(fields: [order_id], references: [id], onDelete: Cascade)
    product               Product                @relation(fields: [product_id], references: [id])

    @@index([order_id])
    @@index([product_id])
    @@index([status])
    @@index([created_at])
    @@index([order_id, status])
    @@index([order_id, created_at])
}

model Category {
    id       Int                @id @default(autoincrement())
    category String
    active   Boolean            @default(true)
    options  CategoryOnOption[]
    products Product[]

    @@index([active])
}

model CategoryOnOption {
    id          Int      @id @default(autoincrement())
    category_id Int
    option_id   Int
    category    Category @relation(fields: [category_id], references: [id])
    option      Option   @relation(fields: [option_id], references: [id])

    @@unique([category_id, option_id])
    @@index([category_id])
    @@index([option_id])
}

model Option {
    id          Int                    @id @default(autoincrement())
    option_name String
    active      Boolean                @default(true)
    categories  CategoryOnOption[]
    products    OptionInProductOrder[]
}

model OptionInProductOrder {
    id                  Int            @id @default(autoincrement())
    product_in_order_id Int
    option_id           Int
    option              Option         @relation(fields: [option_id], references: [id])
    product_in_order    ProductInOrder @relation(fields: [product_in_order_id], references: [id], onDelete: Cascade)

    @@index([product_in_order_id])
    @@index([option_id])
}

model MetaMessageLog {
    id            Int              @id @default(autoincrement())
    home_order_id Int
    template_name String
    template_id   String
    created_at    DateTime         @default(now()) @db.Timestamptz(3)
    direction     MessageDirection
    home_order    HomeOrder        @relation(fields: [home_order_id], references: [id], onDelete: Cascade)

    @@index([home_order_id])
    @@index([created_at])
    @@index([home_order_id, created_at])
    @@index([home_order_id, direction, created_at])
}

// model Coupon {
//     id                Int             @id @default(autoincrement())
//     code              String          @unique
//     label             String?
//     value_type        CouponValueType
//     percentage_amount Float?          @default(0)
//     fixed_amount      Float?          @default(0)
//     created_at        DateTime        @default(now()) @db.Timestamptz(3)
//     expires_at        DateTime?       @db.Timestamptz(3)
//     unlimited         Boolean         @default(false)
//     usages            CouponUsage[]
// }

// model CouponUsage {
//     id        Int      @id @default(autoincrement())
//     coupon_id Int
//     order_id  Int
//     amount    Float    @default(0)
//     used_at   DateTime @default(now()) @db.Timestamptz(3)
//     coupon    Coupon   @relation(fields: [coupon_id], references: [id], onDelete: Cascade)
//     order     Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
// }

// enum CouponValueType {
//     FIXED
//     PERCENTAGE
// }

enum WorkingShift {
    UNSPECIFIED
    LUNCH
    DINNER
}

enum OrderType {
    TABLE
    HOME
    PICKUP
}

enum PaymentType {
    CASH
    CARD
    VOUCH
    CREDIT
}

enum KitchenType {
    HOT
    COLD
    HOT_AND_COLD
    NONE
    OTHER
}

enum EngagementType {
    QR_CODE
    IMAGE
    MESSAGE
}

enum EngagementLedgerStatus {
    ISSUED
    REDEEMED
    VOID
}

enum RiceLogType {
    MANUAL
    BATCH
    RESET
}

enum PaymentScope {
    UNKNOWN
    FULL
    PARTIAL
    ROMAN
}

enum MessageDirection {
    INBOUND
    OUTBOUND
}

enum OrderStatus {
    ACTIVE
    PAID
    CANCELLED
}

enum PlannedPayment {
    CASH
    CARD
    UNKNOWN
}

enum ProductInOrderStatus {
    IN_ORDER
    DELETED_COOKED
    DELETED_UNCOOKED
}

enum CustomerOrigin {
    UNKNOWN
    PHONE
    WEB
    COUPON
    REFERRAL
}
