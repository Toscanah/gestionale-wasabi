generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider         = "zod-prisma-types"
    createInputTypes = "false"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Rider {
    id       Int     @id @default(autoincrement())
    name     String
    surname  String
    nickname String?
    active   Boolean @default(true)
}

model Order {
    id                 Int              @id @default(autoincrement())
    created_at         DateTime         @default(now())
    updated_at         DateTime         @default(now()) @updatedAt
    discount           Float            @default(0)
    type               OrderType
    is_receipt_printed Boolean          @default(false)
    suborder_of        Int?
    rices              Int?
    salads             Int?
    soups              Int?
    shift              WorkingShift     @default(UNSPECIFIED)
    status             OrderStatus      @default(ACTIVE)
    engagements        Engagement[]
    payments           Payment[]
    products           ProductInOrder[]
    //
    home_order         HomeOrder?
    pickup_order       PickupOrder?
    table_order        TableOrder?
}

model TableOrder {
    id       Int     @id
    table    String
    res_name String?
    people   Int
    order    Order   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model HomeOrder {
    id              Int              @id
    address_id      Int
    customer_id     Int
    when            String           @default("immediate")
    contact_phone   String?
    last_reply_at   DateTime?
    reply_seen_at   DateTime?
    prepaid         Boolean          @default(false)
    planned_payment PlannedPayment   @default(UNKNOWN)
    address         Address          @relation(fields: [address_id], references: [id])
    customer        Customer         @relation(fields: [customer_id], references: [id])
    order           Order            @relation(fields: [id], references: [id], onDelete: Cascade)
    messages        MetaMessageLog[]
}

model PickupOrder {
    id              Int            @id
    customer_id     Int?
    when            String         @default("immediate")
    name            String
    planned_payment PlannedPayment @default(UNKNOWN)
    prepaid         Boolean        @default(false)
    customer        Customer?      @relation(fields: [customer_id], references: [id])
    order           Order          @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Address {
    id          Int         @id @default(autoincrement())
    customer_id Int
    street      String
    civic       String
    doorbell    String
    floor       String?
    stair       String?
    street_info String?
    active      Boolean     @default(true)
    temporary   Boolean     @default(false)
    customer    Customer    @relation(fields: [customer_id], references: [id])
    home_orders HomeOrder[]
}

model EngagementTemplate {
    id          Int            @id @default(autoincrement())
    label       String?
    type        EngagementType
    payload     Json
    created_at  DateTime       @default(now())
    engagements Engagement[]
}

model Engagement {
    id          Int                @id @default(autoincrement())
    created_at  DateTime           @default(now())
    customer_id Int?
    order_id    Int?
    template_id Int
    enabled     Boolean            @default(true)
    customer    Customer?          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    order       Order?             @relation(fields: [order_id], references: [id])
    template    EngagementTemplate @relation(fields: [template_id], references: [id])
}

model Customer {
    id            Int           @id @default(autoincrement())
    name          String?
    surname       String?
    email         String?
    preferences   String?
    active        Boolean       @default(true)
    phone_id      Int           @unique
    order_notes   String?
    addresses     Address[]
    phone         Phone         @relation(fields: [phone_id], references: [id], onDelete: Cascade)
    engagements   Engagement[]
    home_orders   HomeOrder[]
    pickup_orders PickupOrder[]
}

model Phone {
    id       Int       @id @default(autoincrement())
    phone    String    @unique
    customer Customer?
}

model Payment {
    id                 Int          @id @default(autoincrement())
    amount             Float        @default(0)
    order_id           Int
    created_at         DateTime     @default(now())
    type               PaymentType
    scope              PaymentScope @default(UNKNOWN)
    payment_group_code String?
    order              Order        @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model RiceLog {
    id            Int         @id @default(autoincrement())
    created_at    DateTime    @default(now())
    rice_batch_id Int?
    manual_value  Float?
    type          RiceLogType
    rice_batch    RiceBatch?  @relation(fields: [rice_batch_id], references: [id])
}

model RiceBatch {
    id       Int       @id @default(autoincrement())
    amount   Float     @default(0)
    label    String?
    rice_log RiceLog[]
}

model Product {
    id          Int              @id @default(autoincrement())
    category_id Int?
    code        String
    desc        String
    site_price  Float            @default(0)
    home_price  Float            @default(0)
    rice        Float            @default(0)
    active      Boolean          @default(true)
    kitchen     KitchenType      @default(NONE)
    rices       Int              @default(0)
    salads      Int              @default(0)
    soups       Int              @default(0)
    category    Category?        @relation(fields: [category_id], references: [id])
    orders      ProductInOrder[]
}

model ProductInOrder {
    id             Int                    @id @default(autoincrement())
    product_id     Int
    order_id       Int
    quantity       Int                    @default(0)
    paid_quantity  Int                    @default(0)
    printed_amount Int                    @default(0)
    created_at     DateTime               @default(now())
    frozen_price   Float                  @default(0)
    status         ProductInOrderStatus   @default(IN_ORDER)
    variation      String?
    options        OptionInProductOrder[]
    order          Order                  @relation(fields: [order_id], references: [id], onDelete: Cascade)
    product        Product                @relation(fields: [product_id], references: [id])
}

model Category {
    id       Int                @id @default(autoincrement())
    category String
    active   Boolean            @default(true)
    options  CategoryOnOption[]
    products Product[]
}

model CategoryOnOption {
    id          Int      @id @default(autoincrement())
    category_id Int
    option_id   Int
    category    Category @relation(fields: [category_id], references: [id])
    option      Option   @relation(fields: [option_id], references: [id])
}

model Option {
    id          Int                    @id @default(autoincrement())
    option_name String
    active      Boolean                @default(true)
    categories  CategoryOnOption[]
    products    OptionInProductOrder[]
}

model OptionInProductOrder {
    id                  Int            @id @default(autoincrement())
    product_in_order_id Int
    option_id           Int
    option              Option         @relation(fields: [option_id], references: [id])
    product_in_order    ProductInOrder @relation(fields: [product_in_order_id], references: [id], onDelete: Cascade)
}

model MetaMessageLog {
    id            Int              @id @default(autoincrement())
    home_order_id Int
    template_name String
    template_id   String
    created_at    DateTime         @default(now())
    direction     MessageDirection
    home_order    HomeOrder        @relation(fields: [home_order_id], references: [id], onDelete: Cascade)
}

enum WorkingShift {
    UNSPECIFIED
    LUNCH
    DINNER
}

enum OrderType {
    TABLE
    HOME
    PICKUP
}

enum PaymentType {
    CASH
    CARD
    VOUCH
    CREDIT
}

enum KitchenType {
    HOT
    COLD
    HOT_AND_COLD
    NONE
    OTHER
}

enum EngagementType {
    QR_CODE
    IMAGE
    MESSAGE
}

enum RiceLogType {
    MANUAL
    BATCH
    RESET
}

enum PaymentScope {
    UNKNOWN
    FULL
    PARTIAL
    ROMAN
}

enum MessageDirection {
    INBOUND
    OUTBOUND
}

enum OrderStatus {
    ACTIVE
    PAID
    CANCELLED
}

enum PlannedPayment {
    CASH
    CARD
    UNKNOWN
}

enum ProductInOrderStatus {
    IN_ORDER
    DELETED_COOKED
    DELETED_UNCOOKED
}
