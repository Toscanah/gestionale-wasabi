generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider         = "zod-prisma-types"
    createInputTypes = false
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

enum WorkingShift {
    UNSPECIFIED
    LUNCH
    DINNER
}

enum OrderType {
    TABLE
    HOME
    PICKUP
}

enum OrderState {
    ACTIVE
    PAID
    CANCELLED
}

enum ProductInOrderState {
    IN_ORDER
    DELETED_COOKED
    DELETED_UNCOOKED
}

enum PaymentType {
    CASH
    CARD
    VOUCH
    CREDIT
}

enum QuickPaymentOption {
    ALREADY_PAID
    CASH
    CARD
    UNKNOWN
}

enum KitchenType {
    HOT
    COLD
    HOT_AND_COLD
    OTHER
    NONE
}

enum EngagementType {
    QR_CODE
    MESSAGE
    IMAGE
}

enum EngagementState {
    PENDING // waiting for the next order to be created and engagement applied
    APPLIED // engagement applied to the order
    USED // engagement used (after order is PAID) and not valid anymore
}

enum RiceLogType {
    MANUAL
    BATCH
    RESET
}

model Rider {
    id       Int     @id @default(autoincrement())
    name     String
    surname  String
    nickname String?
    active   Boolean @default(true)
}

model Order {
    id                 Int              @id @default(autoincrement())
    created_at         DateTime         @default(now())
    updated_at         DateTime         @default(now()) @updatedAt
    total              Float            @default(0)
    discount           Float            @default(0)
    is_receipt_printed Boolean          @default(false)
    shift              WorkingShift     @default(UNSPECIFIED)
    soups              Int?
    salads             Int?
    rices              Int?
    suborder_of        Int?
    state              OrderState       @default(ACTIVE)
    type               OrderType
    products           ProductInOrder[]
    payments           Payment[]
    engagement         Engagement[]
    table_order        TableOrder?
    home_order         HomeOrder?
    pickup_order       PickupOrder?

    @@index([created_at, type, state])
}

model TableOrder {
    id       Int     @id @default(autoincrement())
    order_id Int     @unique
    table    String
    res_name String?
    people   Int
    order    Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model HomeOrder {
    id            Int                @id @default(autoincrement())
    order_id      Int                @unique
    address_id    Int
    customer_id   Int
    when          String             @default("immediate")
    notes         String?
    payment       QuickPaymentOption @default(UNKNOWN)
    contact_phone String?
    order         Order              @relation(fields: [order_id], references: [id], onDelete: Cascade)
    address       Address            @relation(fields: [address_id], references: [id])
    customer      Customer           @relation(fields: [customer_id], references: [id])
}

model PickupOrder {
    id          Int       @id @default(autoincrement())
    order_id    Int       @unique
    customer_id Int?
    when        String    @default("immediate")
    notes       String?
    name        String
    customer    Customer? @relation(fields: [customer_id], references: [id])
    order       Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Address {
    id          Int         @id @default(autoincrement())
    customer_id Int
    street      String
    civic       String
    doorbell    String
    floor       String?
    stair       String?
    street_info String?
    active      Boolean     @default(true)
    temporary   Boolean     @default(false)
    customer    Customer    @relation(fields: [customer_id], references: [id])
    home_orders HomeOrder[]
}

model EngagementTemplate {
    id          Int            @id @default(autoincrement())
    label       String?
    type        EngagementType
    payload     Json
    created_at  DateTime       @default(now())
    engagements Engagement[]
}

model Engagement {
    id                     Int                @id @default(autoincrement())
    engagement_template_id Int
    engagement_template    EngagementTemplate @relation(fields: [engagement_template_id], references: [id])
    created_at             DateTime           @default(now())
    customer               Customer?          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    customer_id            Int?
    order                  Order?             @relation(fields: [order_id], references: [id], onDelete: SetNull)
    order_id               Int?
    used_at                DateTime?
}

model Customer {
    id            Int           @id @default(autoincrement())
    name          String?
    surname       String?
    email         String?
    preferences   String?
    active        Boolean       @default(true)
    phone_id      Int           @unique
    phone         Phone         @relation(fields: [phone_id], references: [id], onDelete: Cascade)
    addresses     Address[]
    home_orders   HomeOrder[]
    pickup_orders PickupOrder[]
    engagement    Engagement[]
}

model Phone {
    id       Int       @id @default(autoincrement())
    phone    String    @unique
    customer Customer?
}

model Payment {
    id         Int         @id @default(autoincrement())
    amount     Float       @default(0)
    order_id   Int
    created_at DateTime    @default(now())
    type       PaymentType
    order      Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model RiceLog {
    id            Int         @id @default(autoincrement())
    created_at    DateTime    @default(now())
    rice_batch_id Int?
    rice_batch    RiceBatch?  @relation(fields: [rice_batch_id], references: [id])
    manual_value  Float?
    type          RiceLogType
}

model RiceBatch {
    id       Int       @id @default(autoincrement())
    amount   Float     @default(0)
    label    String?
    rice_log RiceLog[]
}

model Product {
    id          Int              @id @default(autoincrement())
    category_id Int?
    code        String
    desc        String
    site_price  Float            @default(0)
    home_price  Float            @default(0)
    rice        Float            @default(0)
    salads      Int              @default(0)
    soups       Int              @default(0)
    rices       Int              @default(0)
    active      Boolean          @default(true)
    kitchen     KitchenType      @default(NONE)
    orders      ProductInOrder[]
    category    Category?        @relation(fields: [category_id], references: [id])
}

model ProductInOrder {
    id              Int                    @id @default(autoincrement())
    product_id      Int
    order_id        Int
    quantity        Int                    @default(0)
    total           Float                  @default(0)
    is_paid_fully   Boolean                @default(false)
    paid_quantity   Int                    @default(0)
    rice_quantity   Float                  @default(0)
    printed_amount  Int                    @default(0)
    state           ProductInOrderState    @default(IN_ORDER)
    additional_note String?
    created_at      DateTime               @default(now())
    options         OptionInProductOrder[]
    product         Product                @relation(fields: [product_id], references: [id])
    order           Order                  @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Category {
    id       Int                @id @default(autoincrement())
    category String
    active   Boolean            @default(true)
    products Product[]
    options  CategoryOnOption[]
}

model CategoryOnOption {
    id          Int      @id @default(autoincrement())
    category_id Int
    option_id   Int
    category    Category @relation(fields: [category_id], references: [id])
    option      Option   @relation(fields: [option_id], references: [id])
}

model Option {
    id          Int                    @id @default(autoincrement())
    option_name String
    active      Boolean                @default(true)
    categories  CategoryOnOption[]
    products    OptionInProductOrder[]
}

model OptionInProductOrder {
    id                  Int            @id @default(autoincrement())
    product_in_order_id Int
    option_id           Int
    product_in_order    ProductInOrder @relation(fields: [product_in_order_id], references: [id], onDelete: Cascade)
    option              Option         @relation(fields: [option_id], references: [id])
}
